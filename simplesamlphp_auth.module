<?php

/**
 * @file
 * simpleSAMLphp authentication module for Drupal.
 *
 * This authentication module is based on the shibboleth authentication module,
 * with changes to adopt to use simpleSAMLphp.
 *
 * ISSUES and TODOs:
 *  ISSUE: User is always dropped on user page after login, instead of where
 *         they were when they clicked "Federated Log In". Because of this, deep
 *         linking to access controlled content does not work. Usability would
 *         be considerably increased if this were resolved.
 *  FYI: Drupal now requires knowledge of the local user password in order to
 *       change e-mail address, etc. This could be an issue for users of
 *       accounts that are autoprovisioned by this module, though Drupal does
 *       give users the ability to reset their password to something they know
 *       via the Request new password feature.
 *  KLUDGE: Drupal does not kill the session on logout, even with
 *          drupal_session_destroy_uid(), so I had to use session_destroy().
 * @todo Rework the default login limitation logic to use a drupal permission
 *        rather than a list of UIDs.
 * @todo When denying access because the administrator has chosen not to allow
 *        the module to register/create accounts, the user is told to contact
 *        the administrator; the message should provide the contact information.
 *  ISSUE: Until Drupal issue #754560 is resolved users will not see logout
 *         notices.
 */

use Drupal\Core\Url;
use Drupal\Core\Form\FormStateInterface;
use Drupal\simplesamlphp_auth\SimplesamlphpAuthManager;

/**
 * Implements hook_help().
 */
function simplesamlphp_auth_help($route_name) {
  switch ($route_name) {
    case 'simplesamlphp_auth.admin_settings':
    case 'help.page.simplesamlphp_auth':
      $output = t('<p>This module integrates Drupal with a SimpleSAMLphp Service Point (SP), effectively federating Drupal.</p>');

      return $output;
  }
}

/**
 *  Implements hook_user_login().
 */
function simplesamlphp_auth_user_login($account) {

  $simplesaml = \Drupal::service('simplesamlphp_auth.manager');

  if (!$simplesaml->isActivated()) {
    return;
  }

  // If user registration has a valid session...
  if ($simplesaml->isAuthenticated() && $simplesaml->getAuthname() == $account->getInitialEmail()) {
    // Get name and mail from default attributes.
    try {
      $name = $simplesaml->getDefaultName();
      $mail = $simplesaml->getDefaultEmail();
    } catch (Exception $e) {
      drupal_set_message(t('Your user name was not provided by your identity provider (IDP).'), "error");
      \Drupal::logger('simplesamlphp_auth')->critical($e->getMessage());
    }

    // Update username and email address.
    // @TODO Make this conditional.
    // Should this go in the Manager (externalLogin method)
    $account->setUsername($name);
    $account->setEmail($mail);
    $account->save();

  }
}

/**
 *  Implements hook_user_logout().
 */
function simplesamlphp_auth_user_logout($account) {

  $logout_url = \Drupal::config('simplesamlphp_auth.settings')->get('logout_goto_url');
  $simplesaml = \Drupal::service('simplesamlphp_auth.manager');
  $simplesaml->load();

  // Have to destroy the session here as some configurations of SimpleSAMLphp_auth
  // can create infinite loops. By removing IdP auth before Drupal auth, checks
  // for local authentication will trigger before the session is destroyed
  // naturally. We must therefore destroy the session manually here.
  session_destroy();

  if ($logout_url) {
    $simplesaml->instance->logout($logout_url);
  }
  else {
    $simplesaml->instance->logout();
  }
}

/**
 *  Implements hook_ENTITY_TYPE_delete().
 */
function simplesamlphp_auth_user_delete(Drupal\Core\Entity\EntityInterface $entity) {
  db_delete('simplesamlphp_auth_authmap')
    ->condition('uid', $entity->id())
    ->execute();
}

/**
 *  Implements hook_form_FORM_ID_alter().
 *
 * Alters the user register form to include a checkbox signifying the user
 * should be SimpleSAML enabled. Removes password fields if the IdP
 * is the sole place for password management.
 *
 * @see AccountForm::form()
 * @see simplesamlphp_auth_user_form_submit()
 */
function simplesamlphp_auth_form_user_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  simplesamlphp_auth_user_form_includes($form);

  // If the user has a simplesamlphp_auth authmap record, then don't require
  // them to know their Drupal password. This will allow them to change their
  // e-mail address, and set a Drupal password if they want to (and are allowed).
  $account = $form_state->getFormObject()->getEntity();
  $saml_enabled = db_query("SELECT authname FROM {simplesamlphp_auth_authmap} WHERE authname = :authname", array(':authname' => $account->getInitialEmail()))->fetchField();
  if ($saml_enabled) {
    $form['simplesamlphp_auth_user_enable']['#default_value'] = TRUE;
    unset($form['account']['current_pass']);
    unset($form['account']['current_pass_required_values']);
    $form['#validate'] = array_diff($form['#validate'], array('user_validate_current_pass'));

    // If the user is a simplesamlphp_auth user and is NOT allowed to set their Drupal password, remove the fields from the form.
    $config = \Drupal::config('simplesamlphp_auth.settings');
    if (!$config->get('allow.set_drupal_pwd')) {
      unset($form['account']['pass']);
    }
  }
}

/**
 *  Implements hook_form_FORM_ID_alter().
 *
 * Alters the user register form to include a checkbox signifying the user
 * should be SimpleSAML enabled.
 *
 *
 * @see AccountForm::form()
 * @see simplesamlphp_auth_user_form_submit()
 */
function simplesamlphp_auth_form_user_register_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  simplesamlphp_auth_user_form_includes($form);
  $form['simplesamlphp_auth_user_enable']['#default_value'] = TRUE;
}

/**
 * Helper function to include the SimpleSAML checkbox on user forms.
 *
 * @param $form
 *
 * @see simplesamlphp_auth_form_user_form_alter()
 * @see simplesamlphp_auth_form_user_register_form_alter()
 */
function simplesamlphp_auth_user_form_includes(&$form) {
  $form['simplesamlphp_auth_user_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable this user to leverage SAML authentication'),
  );

  // We store the authname as the initial email. If we're using SimpleSAML we
  // need to enforce an email address.
  $form['account']['mail']['#required'] = TRUE;

  $form['actions']['submit']['#submit'][] = 'simplesamlphp_auth_user_form_submit';
}

/**
 *  Implements hook_form_FORM_ID_alter().
 */
function simplesamlphp_auth_form_user_login_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  // Return without executing if the functionality is not enabled.
  if (!\Drupal::config('simplesamlphp_auth.settings')->get('activate')) {
    return;
  }

  $link = \Drupal::url('simplesamlphp_auth.saml_login');

  $form['simplesamlphp_auth_login_link'] = array(
    '#markup' => \Drupal::l(t('Fedarated Log In'), new Url('simplesamlphp_auth.saml_login', array(), array(
    'attributes' => array(
      'class' => array('simplesamlphp-auth-login-link'),
    ),
  ))));

}

/**
 * Form submission handler for user_form.
 *
 * @see simplesamlphp_auth_form_user_register_form_alter()
 * @see simplesamlphp_auth_form_user_form_alter()
 */
function simplesamlphp_auth_user_form_submit($form, FormStateInterface $form_state) {

  // Enter the user's authname into the simplesamlphp_auth_authmap table.
  if ($form_state->getValue('simplesamlphp_auth_user_enable')) {
    $account = $form_state->getFormObject()->getEntity();
    db_merge('simplesamlphp_auth_authmap')
      ->key(array(
        'uid' => $form_state->getValue('uid'),
      ))
      ->fields(array(
        'authname' => $account->getInitialEmail(),
      ))
      ->execute();
  }
  // Remove this username from the simplesamlphp_auth_authmap table.
  else {
    db_delete('simplesamlphp_auth_authmap')
      ->condition('uid', $form_state->getValue('uid'))
      ->execute();
  }
}
